// #############################################################################
// *****************************************************************************
//                  Copyright (c) 2007-2014, WiMi-net Corp.
//      THIS IS AN UNPUBLISHED WORK CONTAINING CONFIDENTIAL AND PROPRIETARY
//               INFORMATION WHICH IS THE PROPERTY OF WIMI-NET CORP.
//
//    ANY DISCLOSURE, USE, OR REPRODUCTION, WITHOUT WRITTEN AUTHORIZATION FROM
//                   WIMI-NET CORP., IS STRICTLY PROHIBITED.
// *****************************************************************************
// #############################################################################
//
// File:    wimi-net.h
// Author:  Mickle.ding
// Created: 02/04/2007
//
// Description:  
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#ifndef _WIMI_NET_INC_

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define _WIMI_NET_INC_


// -----------------------------------------------------------------------------
// DESCRIPTION: 如果是C++文件，请采用: extern "C"        __declspec( dllexport )
// -----------------------------------------------------------------------------
#define DLLIMPORT                extern "C"              __declspec( dllimport )

// -----------------------------------------------------------------------------
// DESCRIPTION: 如果是C++文件，请采用: extern "C"        __declspec( dllexport )
// -----------------------------------------------------------------------------
#define DLLEXPORT                extern "C"              __declspec( dllexport )




// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CONFIGURE_MODE_NORMAL                                  0X00

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CONFIGURE_MODE_NATIVE                                  0X01

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CONFIGURE_MODE_REMOTE                                  0X02





// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_110                                          0X01

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_300                                          0X02

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_600                                          0X04

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_1200                                         0X11

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_2400                                         0X12

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_4800                                         0X14

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_9600                                         0X18

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_14400                                        0X21

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_19200                                        0X22

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_38400                                        0X24

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_56000                                        0X27

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_57600                                        0X28

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_115200                                       0X41

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_128000                                       0X42

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define UART_BAUD_256000                                       0X44






// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CHSPEED_1K2                                            0X00

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CHSPEED_2K4                                            0X01

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CHSPEED_4K8                                            0X02

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CHSPEED_10K                                            0X03

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CHSPEED_38K4                                           0X04

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CHSPEED_76K8                                           0X05

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CHSPEED_100K                                           0X06

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CHSPEED_250K                                           0X07

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define CHSPEED_500K                                           0X08


// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define TXD_TASK_STATUS_JOB_WAITING                            0XFF

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define TXD_TASK_STATUS_JOB_ONMARCH                            0X00

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define TXD_TASK_STATUS_REPORTTABLE                            0X80

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define TXD_TASK_STATUS_END_SUCCESS       ( TXD_TASK_STATUS_REPORTTABLE + 0X01 )

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define TXD_TASK_STATUS_END_FAILURE       ( TXD_TASK_STATUS_REPORTTABLE + 0X02 )

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define TXD_TASK_STATUS_END_NOCRC32       ( TXD_TASK_STATUS_REPORTTABLE + 0X03 )



// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define RXD_TASK_STATUS_JOB_WAITING                            0XFF

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define RXD_TASK_STATUS_JOB_ONMARCH                            0X00

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define RXD_TASK_STATUS_REPORTTABLE                            0X80

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define RXD_TASK_STATUS_END_SUCCESS       ( RXD_TASK_STATUS_REPORTTABLE + 0X01 )

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define RXD_TASK_STATUS_END_FAILURE       ( RXD_TASK_STATUS_REPORTTABLE + 0X02 )

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define RXD_TASK_STATUS_END_NOCRC32       ( RXD_TASK_STATUS_REPORTTABLE + 0X03 )

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
typedef struct _SignalProfile
{
   // -----------------------------------------------------------------------------
   // DESCRIPTION: 无线站点当前的工作状态
   // -----------------------------------------------------------------------------
   unsigned char                                               m_iHostStatus;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 无线网络当前的工作状况
   // --------------------------------------------------------------------------
   unsigned char                                               m_iNetworkStatus;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 目标接收节点
   // --------------------------------------------------------------------------
   unsigned short                                              m_iRxNodeID;
      
   // --------------------------------------------------------------------------
   // DESCRIPTION: 记录本机报文的SLQI
   // --------------------------------------------------------------------------
   unsigned char                                               m_iHostSLQI;   
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 记录本机报文的RSSI
   // --------------------------------------------------------------------------
   unsigned char                                               m_iHostRSSI;   
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 记录对端有效报文的SLQI
   // --------------------------------------------------------------------------
   unsigned char                                               m_iPeerSLQI;   
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 记录对端有效报文的RSSI
   // --------------------------------------------------------------------------
   unsigned char                                               m_iPeerRSSI; 

   // --------------------------------------------------------------------------
   // DESCRIPTION: 本机节点的LNA设置
   // --------------------------------------------------------------------------
   unsigned char                                               m_iLNASet;

   // --------------------------------------------------------------------------
   // DESCRIPTION: 本机节点的TPA设置
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTPASet;

   // --------------------------------------------------------------------------
   // DESCRIPTION: 本机节点的TPA设置
   // --------------------------------------------------------------------------
   unsigned char                                               m_iServer;

   // --------------------------------------------------------------------------
   // DESCRIPTION: 本机节点的工作信道
   // --------------------------------------------------------------------------
   unsigned char                                               m_iChanX1;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 本机节点的发送衰减
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTxLoss;

   // --------------------------------------------------------------------------
   // DESCRIPTION: 本机节点的接收衰减
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRxLoss;
        
} SignalProfile;


// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
typedef struct _VersionInfo 
{
   // --------------------------------------------------------------------------
   // DESCRIPTION:  结构体的长度
   // --------------------------------------------------------------------------
   unsigned long                                               m_dwInfoSize;   
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 主要版本号码
   // --------------------------------------------------------------------------
   unsigned long                                               m_dwMajorVersion;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 次要版本号码
   // --------------------------------------------------------------------------
   unsigned long                                               m_dwMinorVersion;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 编译号码
   // --------------------------------------------------------------------------
   unsigned long                                               m_dwBuildNumber;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 处理器的平台号码，0X00=8051, 0X01=ARM
   // --------------------------------------------------------------------------
   unsigned long                                               m_dwPlatformId;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 
   // --------------------------------------------------------------------------
   char                                                        m_pVersion[0X80];     
   
} VersionInfo;


// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
typedef struct _WiMinet_Address_
{
   // --------------------------------------------------------------------------
   // DESCRIPTION: 节点的模组设置
   // --------------------------------------------------------------------------
   unsigned char                                               m_iX2Chip;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 节点的频段设置
   // --------------------------------------------------------------------------
   unsigned char                                               m_iX2Band;

   // --------------------------------------------------------------------------
   // DESCRIPTION: 节点的MAC地址
   // --------------------------------------------------------------------------
   unsigned char                                               m_pX64MAC[0X08];
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 节点的16位地址
   // --------------------------------------------------------------------------
   unsigned short                                              m_iTxAddr;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 节点的TreeID
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTxTree;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 节点的设备类型
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTxMode;
   
} WiMinet_Address;


// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
typedef struct _RFChip_RunTime_
{
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iActive:0X01;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iWiMode:0X02;   
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRFBand:0X01;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iUnused:0X04;
   
} RFChip_RunTime;

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
typedef struct _WiMinet_RunTime_
{
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   RFChip_RunTime                                              m_iChipX1;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   RFChip_RunTime                                              m_iChipX2; 

   // --------------------------------------------------------------------------
   // DESCRIPTION: 父节点地址
   // --------------------------------------------------------------------------
   unsigned short                                              m_iParent;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 通讯的信道
   // --------------------------------------------------------------------------
   unsigned char                                               m_iChanX1;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 工作时隙
   // --------------------------------------------------------------------------
   unsigned char                                               m_iX8Node;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 发送链路衰减
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTxLoss;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 接收链路衰减
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRxLoss;

   // --------------------------------------------------------------------------
   // DESCRIPTION: 当前的 LNA 配置状态
   // --------------------------------------------------------------------------
   unsigned char                                               m_iLNASet;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 当前的 功放的配置状态
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTPASet;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 本节点发送给父节点的信号强度 (RSSI)
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTxRSSI;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 本节点发送给父节点的信号质量 (SLQI)
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTxSLQI;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 本节点接收到的父节点的信号强度 (RSSI)
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRxRSSI;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 本节点接收到的父节点的信号质量 (SLQI)
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRxSLQI;
   
} WiMinet_RunTime;


// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
typedef struct _WiMinet_MeshItem
{
   // --------------------------------------------------------------------------
   // DESCRIPTION: 节点的信息
   // --------------------------------------------------------------------------
   WiMinet_Address                                             m_Address;
   
   // --------------------------------------------------------------------------
   // DESCRIPTION: 节点的运行状态参数
   // --------------------------------------------------------------------------
   WiMinet_RunTime                                             m_RunTime;
   
} WiMinet_MeshItem;


/*
// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
typedef struct _WiMinet_AP_Profile_
{
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iChanX1;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned short                                              m_iTxAddr;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTxTree;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRxRSSI;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRxSLQI;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTxGain;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRxGain;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iSecure;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned short                                              m_iPANX16;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iLNASet;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTPASet;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iStatus;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned short                                              m_iCRCode; 
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   short                                                       m_idBmVal;
	
} WiMinet_AP_Profile;
*/

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
typedef struct _WiMinet_AP_Profile_
{
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iChanX1;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned short                                              m_iTxAddr;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTxTree;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRxRSSI;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRxSLQI;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTxGain;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRxGain;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRFChip:0X01;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iRFBand:0X01;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iX2Chip:0X01;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iX2Band:0X01;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iSecure:0X04;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned short                                              m_iPANX16;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iLNASet;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iTPASet;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned char                                               m_iStatus;
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   unsigned short                                              m_iCRCode; 
	
   // --------------------------------------------------------------------------
   // DESCRIPTION:
   // --------------------------------------------------------------------------
   short                                                       m_idBmVal;
	
} WiMinet_AP_Profile;

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置无线模块串口的波特率
// -----------------------------------------------------------------------------
DLLEXPORT char SetUARTPortSpeed( char iShell, long dwBaudRate );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：启动或者停止协议栈的运行，推荐配置参数的时候停止协议栈，
// 配置完成之后启动协议栈
// -----------------------------------------------------------------------------
DLLEXPORT char SetConfigureMode( char iShell, char iMode );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：使能RSSI输出。如果关闭RSSI输出则不会收到RSSI信号报文
// -----------------------------------------------------------------------------
DLLEXPORT char EnableRSSIOutput( char iShell, char iEnable );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置接收衰减
// -----------------------------------------------------------------------------
DLLEXPORT char SetRxAttenuation( char iShell, char index, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取接收衰减
// -----------------------------------------------------------------------------
DLLEXPORT char GetRxAttenuation( char iShell, char * pIndex );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置发射功率的衰减
// -----------------------------------------------------------------------------
DLLEXPORT char SetTxOutputPower( char iShell, char index, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取发射功率的衰减
// -----------------------------------------------------------------------------
DLLEXPORT char GetTxOutputPower( char iShell, char * pIndex );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置发射功放的配置
// -----------------------------------------------------------------------------
DLLEXPORT char SetSendAmplifier( char iShell, char iAMP, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取发射功放的配置
// -----------------------------------------------------------------------------
DLLEXPORT char GetSendAmplifier( char iShell, char * pAMP );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置接收放大的配置
// -----------------------------------------------------------------------------
DLLEXPORT char SetRecvAmplifier( char iShell, char iAMP, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取接收放大的配置
// -----------------------------------------------------------------------------
DLLEXPORT char GetRecvAmplifier( char iShell, char * pAMP );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置16位的节点地址
// -----------------------------------------------------------------------------
DLLEXPORT char SetNodeTxAddress( char iShell, short iObject, short iAddr, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取16位的节点地址
// -----------------------------------------------------------------------------
DLLEXPORT char GetNodeTxAddress( char iShell, short iObject, short * pAddr );

// -----------------------------------------------------------------------------
// DESCRIPTION: 设置网络的PANID号码
// -----------------------------------------------------------------------------
DLLEXPORT char SetWirelessPANID( char iShell, short iObject, short iPANID, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 读取网络的PANID号码
// -----------------------------------------------------------------------------
DLLEXPORT char GetWirelessPANID( char iShell, short iObject, short * pPANID );

// -----------------------------------------------------------------------------
// DESCRIPTION: 设置网络的安全等级
// -----------------------------------------------------------------------------
DLLEXPORT char SetSecurityLevel( char iShell, short iObject, char iSecurity, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 获取网络的安全等级
// -----------------------------------------------------------------------------
DLLEXPORT char GetSecurityLevel( char iShell, short iObject, char * pSecurity );

// -----------------------------------------------------------------------------
// DESCRIPTION: 设置网络登录密码
// -----------------------------------------------------------------------------
DLLEXPORT char SetAdminPassword( char iShell, short iObject, char * pBuffer, char iSize, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置无线信道的速率编码
// -----------------------------------------------------------------------------
DLLEXPORT char SetWirelessSpeed( char iShell, char iSpeed, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取无线信道的速率编码
// -----------------------------------------------------------------------------
DLLEXPORT char GetWirelessSpeed( char iShell, char * pSpeed );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取Firmware的版本信息
// -----------------------------------------------------------------------------
DLLEXPORT char GetModuleVersion( char iShell, VersionInfo * pVersion );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：批量设置活动节点列表
// -----------------------------------------------------------------------------
DLLEXPORT char InsertActiveNode( char iShell, char * pBuffer, char iCount );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：批量设置不活动节点列表
// -----------------------------------------------------------------------------
DLLEXPORT char DeleteActiveNode( char iShell, char * pBuffer, char iCount );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：终止当前的通讯连接，清除发送缓冲区
// -----------------------------------------------------------------------------
DLLEXPORT char CleanupTxMessage( char iShell );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取节点的运行状态
// -----------------------------------------------------------------------------
DLLEXPORT char GetNodeRunStatus( char iShell, short iNode, char * pStatus );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：主站搜索本网络内的所有子节点
// -----------------------------------------------------------------------------
DLLEXPORT char SearchActiveNode( char iShell );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取当前的客户端搜索状态
// -----------------------------------------------------------------------------
DLLEXPORT char GetSearchProfile( char iShell, char * pStatus );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：查询所有的活动的基站列表
// -----------------------------------------------------------------------------
DLLEXPORT char ScanAccessPoints( char iShell, char iCount );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取当前的基站扫描状态
// -----------------------------------------------------------------------------
DLLEXPORT char GetAPScanProfile( char iShell, char * pStatus );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置基站搜索的信道列表
// -----------------------------------------------------------------------------
DLLEXPORT char SetAPScanChannel( char iShell, char * pBuffer, char iSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取基站搜索的信道列表
// -----------------------------------------------------------------------------
DLLEXPORT char GetAPScanChannel( char iShell, char * pBuffer, char iSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置基站搜索的信道掩码
// -----------------------------------------------------------------------------
DLLEXPORT char SetAPChannelMask( char iShell, char iMask );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取基站搜索的信道掩码
// -----------------------------------------------------------------------------
DLLEXPORT char GetAPChannelMask( char iShell, char * pMask );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置第一信道
// -----------------------------------------------------------------------------
DLLEXPORT char SetWirelessChanA( char iShell, char iChanA, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取第一信道
// -----------------------------------------------------------------------------
DLLEXPORT char GetWirelessChanA( char iShell, char * pChannel );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置第二信道
// -----------------------------------------------------------------------------
DLLEXPORT char SetWirelessChanB( char iShell, char iChanB, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取第二信道
// -----------------------------------------------------------------------------
DLLEXPORT char GetWirelessChanB( char iShell, char * pChannel );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置协议栈的工作模式
// -----------------------------------------------------------------------------
DLLEXPORT char SetNetworkWiMode( char iShell, char iWiMode, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取协议栈的工作模式
// -----------------------------------------------------------------------------
DLLEXPORT char GetNetworkWiMode( char iShell, char * pMode );

// -----------------------------------------------------------------------------
// DESCRIPTION: 信号：获取无线信号强度
// -----------------------------------------------------------------------------
DLLEXPORT char ReadWirelessRSSI( char iShell, char * pBuffer, char iSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 发射：提交高优先级的任务到发送缓冲区
// -----------------------------------------------------------------------------
DLLEXPORT char SendHiQoSMessage( char iShell, short iNode, char * pBuffer, long dwSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 发射：提交无优先级的任务到发送缓冲区
// -----------------------------------------------------------------------------
DLLEXPORT char SendNoQoSMessage( char iShell, short iNode, char * pBuffer, long dwSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 发射：发送无连接的广播通知报文, 固定报文长度 6 Bytes
// -----------------------------------------------------------------------------
DLLEXPORT char SendShortMessage( char iShell, short iNode, char * pBuffer, long iSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 接收：读取接收报文的内容
// -----------------------------------------------------------------------------
DLLEXPORT char ReadInputMessage( char iShell, char * pBuffer, long dwSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 设备：打开WiMinet通讯接口
// -----------------------------------------------------------------------------
DLLEXPORT char OpenWiMinetShell( char * pDevice, long dwParam );

// -----------------------------------------------------------------------------
// DESCRIPTION: 设备：关闭WiMinet通讯接口
// -----------------------------------------------------------------------------
DLLEXPORT char StopWiMinetShell( char iShell );

// -----------------------------------------------------------------------------
// DESCRIPTION: 使能或者关闭会话描述符
// -----------------------------------------------------------------------------
DLLEXPORT char EnableDescriptor( char iShell, char iEnable );

// -----------------------------------------------------------------------------
// DESCRIPTION: 读取设备发出的非格式化信息
// -----------------------------------------------------------------------------
DLLEXPORT char ReadASCIIMessage( char * pBuffer, unsigned char iSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 接收：获取数据报文的大小
// -----------------------------------------------------------------------------
DLLEXPORT char GetRxMessageSize( char iShell, unsigned long * pSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 接收：获取报文的属性
// -----------------------------------------------------------------------------
DLLEXPORT char GetRxMessageAttr( char iShell, char * pAttr );

// -----------------------------------------------------------------------------
// DESCRIPTION: 接收：获取报文的发送方节点号码
// -----------------------------------------------------------------------------
DLLEXPORT char GetRxMessageNode( char iShell, short * pNode );

// -----------------------------------------------------------------------------
// DESCRIPTION: 接收：查询接收任务的状态
// -----------------------------------------------------------------------------
DLLEXPORT char QueryRxMsgStatus( char iShell, char * pStatus );

// -----------------------------------------------------------------------------
// DESCRIPTION: 发射：查询发射任务的状态
// -----------------------------------------------------------------------------
DLLEXPORT char QueryTxMsgStatus( char iShell, char * pStatus );

// -----------------------------------------------------------------------------
// DESCRIPTION: 查询报文发送占用时间
// -----------------------------------------------------------------------------
DLLEXPORT char GetTxMessageTime( char iShell, unsigned long * pTime );

// -----------------------------------------------------------------------------
// DESCRIPTION: 查询报文接收占用时间
// -----------------------------------------------------------------------------
DLLEXPORT char GetRxMessageTime( char iShell, unsigned long * pTime );

// -----------------------------------------------------------------------------
// DESCRIPTION: 获取无线模块的当前运行状态
// -----------------------------------------------------------------------------
DLLEXPORT char GetWModuleStatus( char iShell, char * pMainStatus, char * pSubStatus );

// -----------------------------------------------------------------------------
// DESCRIPTION: 获取当前的网络状态
// -----------------------------------------------------------------------------
DLLEXPORT char GetNetworkStatus( char iShell, unsigned char * pStatus );

// -----------------------------------------------------------------------------
// DESCRIPTION: 获取中央基站的16位地址
// -----------------------------------------------------------------------------
DLLEXPORT char GetCoordinatorID( char iShell, unsigned short * pTxAddr );

// -----------------------------------------------------------------------------
// DESCRIPTION: 获取本节点的父节点地址
// -----------------------------------------------------------------------------
DLLEXPORT char GetParentAddress( char iShell, short iNode, short * pParent );

// -----------------------------------------------------------------------------
// DESCRIPTION: 获取本节点的附属节点的地址列表
// -----------------------------------------------------------------------------
DLLEXPORT char GetMemberAddress( char iShell, short iNode, short * pMember, char * pSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 获取本节点距离中央基站的跳数
// -----------------------------------------------------------------------------
DLLEXPORT char GetMeshCenterHop( char iShell, unsigned char * pCenterHop );

// -----------------------------------------------------------------------------
// DESCRIPTION: 将节点的16位逻辑地址转换成对应的MAC地址
// -----------------------------------------------------------------------------
DLLEXPORT char NodeAddressToMAC( char iShell, unsigned short iNode, char * pMAC );

// -----------------------------------------------------------------------------
// DESCRIPTION: 将节点的MAC地址转换成对应的16位逻辑地址
// -----------------------------------------------------------------------------
DLLEXPORT char MACToNodeAddress( char iShell, char * pMAC, unsigned short * pNode );

// -----------------------------------------------------------------------------
// DESCRIPTION: 查询当前节点所处位置的无线网络的的RSSI信号强度
// -----------------------------------------------------------------------------
DLLEXPORT char QueryNetworkRSSI( char iShell, char * pRSSI, char * pLNASet, char * pdBmVal, char * pLinkup );

// -----------------------------------------------------------------------------
// DESCRIPTION: 查询任意节点的注册信息
// -----------------------------------------------------------------------------
DLLEXPORT char QueryNodeRegInfo( char iShell, short iNode, WiMinet_MeshItem * pInfo );

// -----------------------------------------------------------------------------
// DESCRIPTION: 查询任意节点的全局路由列表
// -----------------------------------------------------------------------------
DLLEXPORT char QueryWiMinetPath( char iShell, short iNode, char * pBuffer, char * pSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取当前的活动接入点列表
// -----------------------------------------------------------------------------
DLLEXPORT char GetActiveAPQueue( char iShell, char iHead, char iSize, char * pQueue, char * pSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置接收站点的节点地址
// -----------------------------------------------------------------------------
DLLEXPORT char SetNodeRxAddress( char iShell, short iObject, short iAddr, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取接收站点的节点地址
// -----------------------------------------------------------------------------
DLLEXPORT char GetNodeRxAddress( char iShell, short iObject, short * pAddr );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：指定本机的网络接入点
// -----------------------------------------------------------------------------
DLLEXPORT char SetHostNetworkAP( char iShell, short iObject, short iAddr, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取本机的网络接入点
// -----------------------------------------------------------------------------
DLLEXPORT char GetHostNetworkAP( char iShell, short iObject, short * pAddr );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
DLLEXPORT char QueryShellErrors( char iShell, unsigned long * pErrors );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
DLLEXPORT char ResetShellErrors( char iShell );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#endif