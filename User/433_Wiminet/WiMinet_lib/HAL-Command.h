// #############################################################################
// *****************************************************************************
//                  Copyright (c) 2007-2009, WiMi-net Corp.
//      THIS IS AN UNPUBLISHED WORK CONTAINING CONFIDENTIAL AND PROPRIETARY
//               INFORMATION WHICH IS THE PROPERTY OF WIMI-NET CORP.
//
//    ANY DISCLOSURE, USE, OR REPRODUCTION, WITHOUT WRITTEN AUTHORIZATION FROM
//                   WIMI-NET CORP., IS STRICTLY PROHIBITED.
// *****************************************************************************
// #############################################################################
//
// File:    hal-command.h
// Author:  Mickle.ding
// Created: 11/10/2011
//
// Description:  Define the class hal-command
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#ifndef _HAL_COMMAND_INC_

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#define _HAL_COMMAND_INC_

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#include "API-Message.h"

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void InitWiMinetMessage( NodeMsg * pMsg, char iMode );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
char SendWiMinetMessage( NodeMsg * pMsg, long iTimerSpan, char iMode );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void InitCommandMessage( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void InitMonitorMessage( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
char SendCommandMessage( NodeMsg * pMsg, long iTimerSpan );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
char SendMonitorMessage( NodeMsg * pMsg, long iTimerSpan );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：远程配置报文的包装
// -----------------------------------------------------------------------------
void IMP_IOShellConfigure( NodeMsg * pPacket, NodeMsg * pCmdMsg, short iTxAddr );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：远程配置报文的包装
// -----------------------------------------------------------------------------
void IMP_WiMinetConfigure( NodeMsg * pPacket, NodeMsg * pCmdMsg, short iTxAddr );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置无线模块串口的波特率
// -----------------------------------------------------------------------------
void IMP_SetUARTPortSpeed( NodeMsg * pMsg, long dwBaudRate );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：启动或者停止协议栈的运行，推荐配置参数的时候停止协议栈，
// 配置完成之后启动协议栈
// -----------------------------------------------------------------------------
void IMP_SetConfigureMode( NodeMsg * pMsg, char iMode );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：使能RSSI输出。如果关闭RSSI输出则不会收到RSSI信号报文
// -----------------------------------------------------------------------------
void IMP_EnableRSSIOutput( NodeMsg * pMsg, char iEnable );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置接收衰减
// -----------------------------------------------------------------------------
void IMP_SetRxAttenuation( NodeMsg * pMsg, char index, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取接收衰减
// -----------------------------------------------------------------------------
void IMP_GetRxAttenuation( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置发射功率的衰减
// -----------------------------------------------------------------------------
void IMP_SetTxOutputPower( NodeMsg * pMsg, char index, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取发射功率的衰减
// -----------------------------------------------------------------------------
void IMP_GetTxOutputPower( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置16位的节点地址
// -----------------------------------------------------------------------------
void IMP_SetNodeTxAddress( NodeMsg * pMsg, short iAddr, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取16位的节点地址
// -----------------------------------------------------------------------------
void IMP_GetNodeTxAddress( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置无线信道的速率编码
// -----------------------------------------------------------------------------
void IMP_SetWirelessSpeed( NodeMsg * pMsg, char iSpeed, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取无线信道的速率编码
// -----------------------------------------------------------------------------
void IMP_GetWirelessSpeed( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取Firmware的版本信息
// -----------------------------------------------------------------------------
void IMP_GetModuleVersion( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：批量设置活动节点列表
// -----------------------------------------------------------------------------
void IMP_InsertActiveNode( NodeMsg * pMsg, char * pBuffer, char iCount );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：批量设置不活动节点列表
// -----------------------------------------------------------------------------
void IMP_DeleteActiveNode( NodeMsg * pMsg, char * pBuffer, char iCount );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：终止当前的通讯连接，清除发送缓冲区
// -----------------------------------------------------------------------------
void IMP_CleanupTxMessage( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取节点的运行状态
// -----------------------------------------------------------------------------
void IMP_GetNodeRunStatus( NodeMsg * pMsg, short iNode );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：主站搜索本网络内的所有子节点
// -----------------------------------------------------------------------------
void IMP_SearchActiveNode( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取当前的客户端搜索状态
// -----------------------------------------------------------------------------
void IMP_GetSearchProfile( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：查询所有的活动的基站列表
// -----------------------------------------------------------------------------
void IMP_ScanAccessPoints( NodeMsg * pMsg, char iCount );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取当前的基站扫描状态
// -----------------------------------------------------------------------------
void IMP_GetAPScanProfile( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置基站搜索的信道列表
// -----------------------------------------------------------------------------
void IMP_SetAPScanChannel( NodeMsg * pMsg, char * pBuffer, char iSize );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取基站搜索的信道列表
// -----------------------------------------------------------------------------
void IMP_GetAPScanChannel( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置基站搜索的信道掩码
// -----------------------------------------------------------------------------
void IMP_SetAPChannelMask( NodeMsg * pMsg, char iMask );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取基站搜索的信道掩码
// -----------------------------------------------------------------------------
void IMP_GetAPChannelMask( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置第一信道
// -----------------------------------------------------------------------------
void IMP_SetWirelessChanA( NodeMsg * pMsg, char iChanA, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取第一信道
// -----------------------------------------------------------------------------
void IMP_GetWirelessChanA( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置第二信道
// -----------------------------------------------------------------------------
void IMP_SetWirelessChanB( NodeMsg * pMsg, char iChanB, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取第二信道
// -----------------------------------------------------------------------------
void IMP_GetWirelessChanB( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置协议栈的工作模式
// -----------------------------------------------------------------------------
void IMP_SetNetworkWiMode( NodeMsg * pMsg, char iWiMode, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：获取协议栈的工作模式
// -----------------------------------------------------------------------------
void IMP_GetNetworkWiMode( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_GetAllNodeStatus( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_GetAllActiveNode( NodeMsg * pMsg );



// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_SetAdminPassword( NodeMsg * pMsg, char * pBuffer, unsigned char iSize, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_SetWirelessPANID( NodeMsg * pMsg, unsigned short iPANID, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_GetWirelessPANID( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_SetSecurityLevel( NodeMsg * pMsg, unsigned char iSecurity, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_GetSecurityLevel( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_GetWModuleStatus( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_GetNetworkStatus( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_GetCoordinatorID( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_GetParentAddress( NodeMsg * pMsg, short iNode );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_GetMemberAddress( NodeMsg * pMsg, short iNode );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_GetMeshCenterHop( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_NodeAddressToMAC( NodeMsg * pMsg, unsigned short iNode );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_MACToNodeAddress( NodeMsg * pMsg, char * pMAC );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_QueryNetworkRSSI( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_QueryNodeRegInfo( NodeMsg * pMsg, short iNode );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_QueryWiMinetPath( NodeMsg * pMsg, short iNode );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void IMP_GetActiveAPQueue( NodeMsg * pMsg, char iHead, char iSize );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void NBlock_GetNetworkWiMode( char iShell );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void NBlock_GetAllNodeStatus( char iShell );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
void NBlock_InsertActiveNode( char iShell, char * pBuffer, char iCount );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：设置接收站点的节点地址
// -----------------------------------------------------------------------------
void IMP_SetNodeRxAddress( NodeMsg * pMsg, short iAddr, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取接收站点的节点地址
// -----------------------------------------------------------------------------
void IMP_GetNodeRxAddress( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：指定本机的网络接入点
// -----------------------------------------------------------------------------
void IMP_SetHostNetworkAP( NodeMsg * pMsg, short iAddr, char iSave );

// -----------------------------------------------------------------------------
// DESCRIPTION: 命令：读取本机的网络接入点
// -----------------------------------------------------------------------------
void IMP_GetHostNetworkAP( NodeMsg * pMsg );

// -----------------------------------------------------------------------------
// DESCRIPTION:
// -----------------------------------------------------------------------------
#endif